{"version":3,"sources":["validateReducer.js"],"names":[],"mappings":";;;;;;;;qBAAc,SAAS;;;;kCAEQ,sBAAsB;;;;AAErD,IAAI,WAAW,YAAA;IACX,WAAW,YAAA,CAAC;;;;;;AAMhB,WAAW,GAAG,UAAC,GAAG,EAAK;AACnB,WAAO,mBAAE,KAAK,CAAC,GAAG,EAAE,mBAAE,aAAa,CAAC,CAAC;CACxC,CAAC;;;;;;AAMF,WAAW,GAAG,UAAC,GAAG,EAAK;AACnB,WAAO,mBAAE,KAAK,CAAC,GAAG,EAAE,mBAAE,UAAU,CAAC,CAAC;CACrC,CAAC;;qBAEa,UAAC,OAAO,EAAK;AACxB,QAAI,QAAQ,YAAA;QACR,WAAW,GAAG,EAAE,CAAC;;AAErB,QAAI,CAAC,WAAW,CAAC,OAAO,CAAC,IAAI,mBAAE,MAAM,CAAC,OAAO,CAAC,CAAC,MAAM,EAAE;AACnD,cAAM,IAAI,KAAK,CAAC,gEAAgE,CAAC,CAAC;KACrF;;;;;AAKD,YAAQ,GAAG,UAAC,MAAM,EAAK;AACnB,2BAAE,OAAO,CAAC,MAAM,EAAE,UAAC,KAAK,EAAE,UAAU,EAAK;AACrC,gBAAI,WAAW,CAAC,KAAK,CAAC,EAAE;AACpB,mCAAE,OAAO,CAAC,KAAK,EAAE,UAAC,MAAM,EAAE,IAAI,EAAK;AAC/B,wBAAI;AACA,6DAAmB,IAAI,CAAC,CAAC;qBAC5B,CAAC,OAAO,CAAC,EAAE;AACR,8BAAM,IAAI,KAAK,CAAC,4EAA4E,CAAC,CAAC;qBACjG;;AAED,wBAAI,mBAAE,OAAO,CAAC,WAAW,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE;AACrC,8BAAM,IAAI,KAAK,CAAC,gEAAgE,CAAC,CAAC;qBACrF;;AAED,+BAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;iBAC1B,CAAC,CAAC;aACN,MAAM,IAAI,WAAW,CAAC,KAAK,CAAC,EAAE;AAC3B,wBAAQ,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC;aAChC,MAAM;AACH,sBAAM,IAAI,KAAK,CAAC,qHAAqH,CAAC,CAAC;aAC1I;SACJ,CAAC,CAAC;KACN,CAAC;;AAEF,YAAQ,CAAC,OAAO,CAAC,CAAC;CACrB","file":"validateReducer.js","sourcesContent":["import _ from './utils';\n\nimport validateActionName from './validateActionName';\n\nlet isDomainMap,\n    isActionMap;\n\n/**\n * @param {Object.<string, Object>} map\n * @return {Boolean} If every object property value is a plain object.\n */\nisDomainMap = (map) => {\n    return _.every(map, _.isPlainObject);\n};\n\n/**\n * @param {Object.<string, Function>} map\n * @return {Boolean} If every object property value is a function.\n */\nisActionMap = (map) => {\n    return _.every(map, _.isFunction);\n};\n\nexport default (reducer) => {\n    let iterator,\n        actionIndex = [];\n\n    if (!isDomainMap(reducer) && _.values(reducer).length) {\n        throw new Error('Reducer definition object must begin with a domain definition.');\n    }\n\n    /**\n     * @param {Object} branch\n     */\n    iterator = (branch) => {\n        _.forEach(branch, (value, domainName) => {\n            if (isActionMap(value)) {\n                _.forEach(value, (action, name) => {\n                    try {\n                        validateActionName(name);\n                    } catch (e) {\n                        throw new Error('Reducer definition object action handler names must be valid action names.');\n                    }\n\n                    if (_.indexOf(actionIndex, name) !== -1) {\n                        throw new Error('Reducer definition object action handler names must be unique.');\n                    }\n\n                    actionIndex.push(name);\n                });\n            } else if (isDomainMap(value)) {\n                iterator(branch[domainName]);\n            } else {\n                throw new Error('Reducer definition object value object all values must correspond to a function (action map) or an object (domain).');\n            }\n        });\n    };\n\n    iterator(reducer);\n};\n"],"sourceRoot":"/source/"}